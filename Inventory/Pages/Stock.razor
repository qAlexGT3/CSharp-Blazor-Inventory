@page "/stock"

<PageTitle>Stock</PageTitle>

@using Inventory.Data.Database
@using System.Diagnostics;
@using Inventory.Data.Models;
@inject DatabaseService DbService

@inject IDialogService DialogService

@inject ISnackbar SnackBar

<h3>Stock</h3>

@if(Loaded != false)
{
    <MudSelect T="int" Label="Location" AnchorOrigin="Origin.BottomCenter" @bind-Value="SelectedDepositId" Variant="Variant.Filled">
        <MudSelectItem Value = "0">Total</MudSelectItem>
        @foreach(var l in locations)
        {
            <MudSelectItem Value="l.Id">@l.LocationName</MudSelectItem>
        }
    </MudSelect>

    @if (SelectedDepositId != 0)
    {        
        <MudDataGrid Items="@products">

            <Columns>

                <PropertyColumn Property="x => x.Name" Title="Name"/>

                <PropertyColumn Property="x=>registers.Where(r=>r.ProductId == x.Id && r.LocationId == SelectedDepositId).Select(x=>x.Quantity).Sum()" Title="Stock" />

                <PropertyColumn Property="@(x=>ValoareStoc(x, 1))" Title="Stock value" />
            
            </Columns>

        </MudDataGrid>
    }
    else
    {
        <MudDataGrid Items="@products">

            <Columns>

                <PropertyColumn Property="x => x.Name" Title="Name"/>

                <PropertyColumn Property="x=>registers.Where(r=>r.ProductId == x.Id).Select(x=>x.Quantity).Sum()" Title="Stock" />

                <PropertyColumn Property="@(x=>ValoareStoc(x, 2))" Title="Stock value" />

            </Columns>

        </MudDataGrid>
    }
}

@code
{
    public bool Loaded = false;

    public int SelectedDepositId = 0;

    List<Register> registers = new();
    List<Location> locations = new();
    List<Product> products = new();

    private string? ValoareStoc(Product x, int type)
    {
        string? tot = null;

        switch(type)
        {
            case 1:
                tot = (registers.Where(r => r.ProductId == x.Id && r.LocationId == SelectedDepositId).Select(x => x.Quantity).Sum() * x.SellPrice).ToString("N2");
                break;

            case 2:
                tot = (registers.Where(r => r.ProductId == x.Id).Select(x => x.Quantity).Sum() * x.SellPrice).ToString("N2");
                break;
        }


        return tot;
    }

    private async Task LoadRegisters()
    {
        var tmp = await DbService.SelectRegisters();

        if (tmp.error != null)
        {
            Debug.WriteLine(tmp.error);
        }
        else
        {
            registers = tmp.registers;
        }
    }

    private async Task LoadLocations()
    {
        var tmp = await DbService.LoadLocations();

        if (tmp.error != null)
        {
            Debug.Write(tmp.error);
        }
        else
        {
            locations = tmp.Locations;
        }
    }

    private async Task LoadProducts()
    {
        var tmp = await DbService.SelectProducts();

        if (tmp.error != null)
        {
            Debug.Write(tmp.error);
        }
        else
        {
            products = tmp.products;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRegisters();

        await LoadLocations();

        await LoadProducts();

        Loaded = true;
    }
}
